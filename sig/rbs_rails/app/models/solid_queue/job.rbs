module SolidQueue
  class Job < ::SolidQueue::Record
    extend ::_ActiveRecord_Relation_ClassMethods[::SolidQueue::Job, ::SolidQueue::Job::ActiveRecord_Relation, ::Integer]

    module GeneratedAttributeMethods
      def id: () -> ::Integer

      def id=: (::Integer) -> ::Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ ::Integer?, ::Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> ::Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> ::Array[::Integer?]?

      def id_previously_was: () -> ::Integer?

      def id_before_last_save: () -> ::Integer?

      def id_change_to_be_saved: () -> ::Array[::Integer?]?

      def id_in_database: () -> ::Integer?

      def saved_change_to_id: () -> ::Array[::Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def queue_name: () -> ::String

      def queue_name=: (::String) -> ::String

      def queue_name?: () -> bool

      def queue_name_changed?: () -> bool

      def queue_name_change: () -> [ ::String?, ::String? ]

      def queue_name_will_change!: () -> void

      def queue_name_was: () -> ::String?

      def queue_name_previously_changed?: () -> bool

      def queue_name_previous_change: () -> ::Array[::String?]?

      def queue_name_previously_was: () -> ::String?

      def queue_name_before_last_save: () -> ::String?

      def queue_name_change_to_be_saved: () -> ::Array[::String?]?

      def queue_name_in_database: () -> ::String?

      def saved_change_to_queue_name: () -> ::Array[::String?]?

      def saved_change_to_queue_name?: () -> bool

      def will_save_change_to_queue_name?: () -> bool

      def restore_queue_name!: () -> void

      def clear_queue_name_change: () -> void

      def class_name: () -> ::String

      def class_name=: (::String) -> ::String

      def class_name?: () -> bool

      def class_name_changed?: () -> bool

      def class_name_change: () -> [ ::String?, ::String? ]

      def class_name_will_change!: () -> void

      def class_name_was: () -> ::String?

      def class_name_previously_changed?: () -> bool

      def class_name_previous_change: () -> ::Array[::String?]?

      def class_name_previously_was: () -> ::String?

      def class_name_before_last_save: () -> ::String?

      def class_name_change_to_be_saved: () -> ::Array[::String?]?

      def class_name_in_database: () -> ::String?

      def saved_change_to_class_name: () -> ::Array[::String?]?

      def saved_change_to_class_name?: () -> bool

      def will_save_change_to_class_name?: () -> bool

      def restore_class_name!: () -> void

      def clear_class_name_change: () -> void

      def arguments: () -> ::String?

      def arguments=: (::String?) -> ::String?

      def arguments?: () -> bool

      def arguments_changed?: () -> bool

      def arguments_change: () -> [ ::String?, ::String? ]

      def arguments_will_change!: () -> void

      def arguments_was: () -> ::String?

      def arguments_previously_changed?: () -> bool

      def arguments_previous_change: () -> ::Array[::String?]?

      def arguments_previously_was: () -> ::String?

      def arguments_before_last_save: () -> ::String?

      def arguments_change_to_be_saved: () -> ::Array[::String?]?

      def arguments_in_database: () -> ::String?

      def saved_change_to_arguments: () -> ::Array[::String?]?

      def saved_change_to_arguments?: () -> bool

      def will_save_change_to_arguments?: () -> bool

      def restore_arguments!: () -> void

      def clear_arguments_change: () -> void

      def priority: () -> ::Integer

      def priority=: (::Integer) -> ::Integer

      def priority?: () -> bool

      def priority_changed?: () -> bool

      def priority_change: () -> [ ::Integer?, ::Integer? ]

      def priority_will_change!: () -> void

      def priority_was: () -> ::Integer?

      def priority_previously_changed?: () -> bool

      def priority_previous_change: () -> ::Array[::Integer?]?

      def priority_previously_was: () -> ::Integer?

      def priority_before_last_save: () -> ::Integer?

      def priority_change_to_be_saved: () -> ::Array[::Integer?]?

      def priority_in_database: () -> ::Integer?

      def saved_change_to_priority: () -> ::Array[::Integer?]?

      def saved_change_to_priority?: () -> bool

      def will_save_change_to_priority?: () -> bool

      def restore_priority!: () -> void

      def clear_priority_change: () -> void

      def active_job_id: () -> ::String?

      def active_job_id=: (::String?) -> ::String?

      def active_job_id?: () -> bool

      def active_job_id_changed?: () -> bool

      def active_job_id_change: () -> [ ::String?, ::String? ]

      def active_job_id_will_change!: () -> void

      def active_job_id_was: () -> ::String?

      def active_job_id_previously_changed?: () -> bool

      def active_job_id_previous_change: () -> ::Array[::String?]?

      def active_job_id_previously_was: () -> ::String?

      def active_job_id_before_last_save: () -> ::String?

      def active_job_id_change_to_be_saved: () -> ::Array[::String?]?

      def active_job_id_in_database: () -> ::String?

      def saved_change_to_active_job_id: () -> ::Array[::String?]?

      def saved_change_to_active_job_id?: () -> bool

      def will_save_change_to_active_job_id?: () -> bool

      def restore_active_job_id!: () -> void

      def clear_active_job_id_change: () -> void

      def scheduled_at: () -> ::ActiveSupport::TimeWithZone?

      def scheduled_at=: (::ActiveSupport::TimeWithZone?) -> ::ActiveSupport::TimeWithZone?

      def scheduled_at?: () -> bool

      def scheduled_at_changed?: () -> bool

      def scheduled_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

      def scheduled_at_will_change!: () -> void

      def scheduled_at_was: () -> ::ActiveSupport::TimeWithZone?

      def scheduled_at_previously_changed?: () -> bool

      def scheduled_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def scheduled_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

      def scheduled_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

      def scheduled_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def scheduled_at_in_database: () -> ::ActiveSupport::TimeWithZone?

      def saved_change_to_scheduled_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def saved_change_to_scheduled_at?: () -> bool

      def will_save_change_to_scheduled_at?: () -> bool

      def restore_scheduled_at!: () -> void

      def clear_scheduled_at_change: () -> void

      def finished_at: () -> ::ActiveSupport::TimeWithZone?

      def finished_at=: (::ActiveSupport::TimeWithZone?) -> ::ActiveSupport::TimeWithZone?

      def finished_at?: () -> bool

      def finished_at_changed?: () -> bool

      def finished_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

      def finished_at_will_change!: () -> void

      def finished_at_was: () -> ::ActiveSupport::TimeWithZone?

      def finished_at_previously_changed?: () -> bool

      def finished_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def finished_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

      def finished_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

      def finished_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def finished_at_in_database: () -> ::ActiveSupport::TimeWithZone?

      def saved_change_to_finished_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def saved_change_to_finished_at?: () -> bool

      def will_save_change_to_finished_at?: () -> bool

      def restore_finished_at!: () -> void

      def clear_finished_at_change: () -> void

      def concurrency_key: () -> ::String?

      def concurrency_key=: (::String?) -> ::String?

      def concurrency_key?: () -> bool

      def concurrency_key_changed?: () -> bool

      def concurrency_key_change: () -> [ ::String?, ::String? ]

      def concurrency_key_will_change!: () -> void

      def concurrency_key_was: () -> ::String?

      def concurrency_key_previously_changed?: () -> bool

      def concurrency_key_previous_change: () -> ::Array[::String?]?

      def concurrency_key_previously_was: () -> ::String?

      def concurrency_key_before_last_save: () -> ::String?

      def concurrency_key_change_to_be_saved: () -> ::Array[::String?]?

      def concurrency_key_in_database: () -> ::String?

      def saved_change_to_concurrency_key: () -> ::Array[::String?]?

      def saved_change_to_concurrency_key?: () -> bool

      def will_save_change_to_concurrency_key?: () -> bool

      def restore_concurrency_key!: () -> void

      def clear_concurrency_key_change: () -> void

      def created_at: () -> ::ActiveSupport::TimeWithZone

      def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ::ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ::ActiveSupport::TimeWithZone

      def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def recurring_execution: () -> ::SolidQueue::RecurringExecution?
    def recurring_execution=: (::SolidQueue::RecurringExecution?) -> ::SolidQueue::RecurringExecution?
    def build_recurring_execution: (?untyped) -> ::SolidQueue::RecurringExecution
    def create_recurring_execution: (untyped) -> ::SolidQueue::RecurringExecution
    def create_recurring_execution!: (untyped) -> ::SolidQueue::RecurringExecution
    def reload_recurring_execution: () -> ::SolidQueue::RecurringExecution?
    def failed_execution: () -> ::SolidQueue::FailedExecution?
    def failed_execution=: (::SolidQueue::FailedExecution?) -> ::SolidQueue::FailedExecution?
    def build_failed_execution: (?untyped) -> ::SolidQueue::FailedExecution
    def create_failed_execution: (untyped) -> ::SolidQueue::FailedExecution
    def create_failed_execution!: (untyped) -> ::SolidQueue::FailedExecution
    def reload_failed_execution: () -> ::SolidQueue::FailedExecution?
    def scheduled_execution: () -> ::SolidQueue::ScheduledExecution?
    def scheduled_execution=: (::SolidQueue::ScheduledExecution?) -> ::SolidQueue::ScheduledExecution?
    def build_scheduled_execution: (?untyped) -> ::SolidQueue::ScheduledExecution
    def create_scheduled_execution: (untyped) -> ::SolidQueue::ScheduledExecution
    def create_scheduled_execution!: (untyped) -> ::SolidQueue::ScheduledExecution
    def reload_scheduled_execution: () -> ::SolidQueue::ScheduledExecution?
    def blocked_execution: () -> ::SolidQueue::BlockedExecution?
    def blocked_execution=: (::SolidQueue::BlockedExecution?) -> ::SolidQueue::BlockedExecution?
    def build_blocked_execution: (?untyped) -> ::SolidQueue::BlockedExecution
    def create_blocked_execution: (untyped) -> ::SolidQueue::BlockedExecution
    def create_blocked_execution!: (untyped) -> ::SolidQueue::BlockedExecution
    def reload_blocked_execution: () -> ::SolidQueue::BlockedExecution?
    def ready_execution: () -> ::SolidQueue::ReadyExecution?
    def ready_execution=: (::SolidQueue::ReadyExecution?) -> ::SolidQueue::ReadyExecution?
    def build_ready_execution: (?untyped) -> ::SolidQueue::ReadyExecution
    def create_ready_execution: (untyped) -> ::SolidQueue::ReadyExecution
    def create_ready_execution!: (untyped) -> ::SolidQueue::ReadyExecution
    def reload_ready_execution: () -> ::SolidQueue::ReadyExecution?
    def claimed_execution: () -> ::SolidQueue::ClaimedExecution?
    def claimed_execution=: (::SolidQueue::ClaimedExecution?) -> ::SolidQueue::ClaimedExecution?
    def build_claimed_execution: (?untyped) -> ::SolidQueue::ClaimedExecution
    def create_claimed_execution: (untyped) -> ::SolidQueue::ClaimedExecution
    def create_claimed_execution!: (untyped) -> ::SolidQueue::ClaimedExecution
    def reload_claimed_execution: () -> ::SolidQueue::ClaimedExecution?

    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include ::SolidQueue::Job::GeneratedRelationMethods
      include ::_ActiveRecord_Relation[::SolidQueue::Job, ::Integer]
      include ::Enumerable[::SolidQueue::Job]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include ::SolidQueue::Job::GeneratedRelationMethods
      include ::_ActiveRecord_Relation[::SolidQueue::Job, ::Integer]
    end
  end
end
