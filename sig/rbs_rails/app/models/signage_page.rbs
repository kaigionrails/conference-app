class SignagePage < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::SignagePage, ::SignagePage::ActiveRecord_Relation, ::Integer]

  module GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def signage_schedule_id: () -> ::Integer

    def signage_schedule_id=: (::Integer) -> ::Integer

    def signage_schedule_id?: () -> bool

    def signage_schedule_id_changed?: () -> bool

    def signage_schedule_id_change: () -> [ ::Integer?, ::Integer? ]

    def signage_schedule_id_will_change!: () -> void

    def signage_schedule_id_was: () -> ::Integer?

    def signage_schedule_id_previously_changed?: () -> bool

    def signage_schedule_id_previous_change: () -> ::Array[::Integer?]?

    def signage_schedule_id_previously_was: () -> ::Integer?

    def signage_schedule_id_before_last_save: () -> ::Integer?

    def signage_schedule_id_change_to_be_saved: () -> ::Array[::Integer?]?

    def signage_schedule_id_in_database: () -> ::Integer?

    def saved_change_to_signage_schedule_id: () -> ::Array[::Integer?]?

    def saved_change_to_signage_schedule_id?: () -> bool

    def will_save_change_to_signage_schedule_id?: () -> bool

    def restore_signage_schedule_id!: () -> void

    def clear_signage_schedule_id_change: () -> void

    def order: () -> ::Integer

    def order=: (::Integer) -> ::Integer

    def order?: () -> bool

    def order_changed?: () -> bool

    def order_change: () -> [ ::Integer?, ::Integer? ]

    def order_will_change!: () -> void

    def order_was: () -> ::Integer?

    def order_previously_changed?: () -> bool

    def order_previous_change: () -> ::Array[::Integer?]?

    def order_previously_was: () -> ::Integer?

    def order_before_last_save: () -> ::Integer?

    def order_change_to_be_saved: () -> ::Array[::Integer?]?

    def order_in_database: () -> ::Integer?

    def saved_change_to_order: () -> ::Array[::Integer?]?

    def saved_change_to_order?: () -> bool

    def will_save_change_to_order?: () -> bool

    def restore_order!: () -> void

    def clear_order_change: () -> void

    def duration_second: () -> ::Integer

    def duration_second=: (::Integer) -> ::Integer

    def duration_second?: () -> bool

    def duration_second_changed?: () -> bool

    def duration_second_change: () -> [ ::Integer?, ::Integer? ]

    def duration_second_will_change!: () -> void

    def duration_second_was: () -> ::Integer?

    def duration_second_previously_changed?: () -> bool

    def duration_second_previous_change: () -> ::Array[::Integer?]?

    def duration_second_previously_was: () -> ::Integer?

    def duration_second_before_last_save: () -> ::Integer?

    def duration_second_change_to_be_saved: () -> ::Array[::Integer?]?

    def duration_second_in_database: () -> ::Integer?

    def saved_change_to_duration_second: () -> ::Array[::Integer?]?

    def saved_change_to_duration_second?: () -> bool

    def will_save_change_to_duration_second?: () -> bool

    def restore_duration_second!: () -> void

    def clear_duration_second_change: () -> void

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def page_image_attachment: () -> ::ActiveStorage::Attachment?
  def page_image_attachment=: (::ActiveStorage::Attachment?) -> ::ActiveStorage::Attachment?
  def build_page_image_attachment: (?untyped) -> ::ActiveStorage::Attachment
  def create_page_image_attachment: (untyped) -> ::ActiveStorage::Attachment
  def create_page_image_attachment!: (untyped) -> ::ActiveStorage::Attachment
  def reload_page_image_attachment: () -> ::ActiveStorage::Attachment?
  def page_image_blob: () -> ::ActiveStorage::Blob?
  def page_image_blob=: (::ActiveStorage::Blob?) -> ::ActiveStorage::Blob?
  def build_page_image_blob: (?untyped) -> ::ActiveStorage::Blob
  def create_page_image_blob: (untyped) -> ::ActiveStorage::Blob
  def create_page_image_blob!: (untyped) -> ::ActiveStorage::Blob
  def reload_page_image_blob: () -> ::ActiveStorage::Blob?
  def signage_schedule: () -> ::SignageSchedule
  def signage_schedule=: (::SignageSchedule?) -> ::SignageSchedule?
  def reload_signage_schedule: () -> ::SignageSchedule?
  def build_signage_schedule: (untyped) -> ::SignageSchedule
  def create_signage_schedule: (untyped) -> ::SignageSchedule
  def create_signage_schedule!: (untyped) -> ::SignageSchedule
  module GeneratedAssociationMethods
    def page_image: () -> ::ActiveStorage::Attached::One

    def page_image=: (::ActionDispatch::Http::UploadedFile) -> ::ActionDispatch::Http::UploadedFile
                   | (::Rack::Test::UploadedFile) -> ::Rack::Test::UploadedFile
                   | (::ActiveStorage::Blob) -> ::ActiveStorage::Blob
                   | (::String) -> ::String
                   | ({ io: ::IO, filename: ::String, content_type: ::String? }) -> { io: ::IO, filename: ::String, content_type: ::String? }
                   | (nil) -> nil
  end
  include GeneratedAssociationMethods

  def self.with_attached_page_image: () -> ::SignagePage::ActiveRecord_Relation

  module GeneratedRelationMethods
    def with_attached_page_image: () -> ::SignagePage::ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::SignagePage::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::SignagePage, ::Integer]
    include ::Enumerable[::SignagePage]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::SignagePage::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::SignagePage, ::Integer]
  end
end
